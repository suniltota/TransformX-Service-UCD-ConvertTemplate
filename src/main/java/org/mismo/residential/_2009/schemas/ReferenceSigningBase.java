//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.01 at 06:02:48 PM IST 
//


package org.mismo.residential._2009.schemas;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ReferenceSigningBase.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ReferenceSigningBase">
 *   &lt;restriction base="{http://www.mismo.org/residential/2009/schemas}MISMOEnum_Base">
 *     &lt;enumeration value="NotSigned"/>
 *     &lt;enumeration value="ReferenceAndContentSignedDirectly"/>
 *     &lt;enumeration value="ReferenceAndContentSignedIndirectly"/>
 *     &lt;enumeration value="ReferenceCreatedFromSignedContent"/>
 *     &lt;enumeration value="ReferenceSignedDirectly"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ReferenceSigningBase")
@XmlEnum
public enum ReferenceSigningBase {


    /**
     * This value indicates that none of the SYSTEM_SIGNATURES are applied to the REFERENCE or ObjectURL element and the resource it points to is not signed. The REFERENCE or ObjectURL element MAY change or be resolved, the resource MAY remain available, and its trustworthiness is outside the scope of the SYSTEM_SIGNATURES.
     * 
     */
    @XmlEnumValue("NotSigned")
    NOT_SIGNED("NotSigned"),

    /**
     * This value indicates that a SYSTEM_SIGNATURE is applied to the REFERENCE or ObjectURL element; the resource it points to has also been signed. The REFERENCE or ObjectURL element MUST NOT change or be resolved, the resource MUST remain available, and its trustworthiness can be determined from the Signature.
     * 
     */
    @XmlEnumValue("ReferenceAndContentSignedDirectly")
    REFERENCE_AND_CONTENT_SIGNED_DIRECTLY("ReferenceAndContentSignedDirectly"),

    /**
     * This value indicates that a SYSTEM_SIGNATURE is applied to the REFERENCE element or the ObjectURL and its sibling elements after computing and saving the OriginalCreatorDigestValue; the resource it points to is not signed. The REFERENCE or ObjectURL element MUST NOT change or be resolved, the resource SHOULD remain available, and its trustworthiness can be determined from the OriginalCreatorDigestValue.
     * 
     */
    @XmlEnumValue("ReferenceAndContentSignedIndirectly")
    REFERENCE_AND_CONTENT_SIGNED_INDIRECTLY("ReferenceAndContentSignedIndirectly"),

    /**
     * This value indicates that the resource pointed to by the REFERENCE or ObjectURL element was originally embedded in the current XML instance document that has SYSTEM_SIGNATURES applied. Prior to validating a SYSTEM_SIGNATURE or applying a new one, the reference MUST be resolved to maintain or determine its trustworthiness.
     * 
     */
    @XmlEnumValue("ReferenceCreatedFromSignedContent")
    REFERENCE_CREATED_FROM_SIGNED_CONTENT("ReferenceCreatedFromSignedContent"),

    /**
     * This value indicates that a SYSTEM_SIGNATURE is applied to the REFERENCE or ObjectURL element; the resource it points to is not signed. The REFERENCE or ObjectURL element MUST NOT change or be resolved, the resource SHOULD remain available, but its trustworthiness is outside the scope of the SYSTEM_SIGNATURES.
     * 
     */
    @XmlEnumValue("ReferenceSignedDirectly")
    REFERENCE_SIGNED_DIRECTLY("ReferenceSignedDirectly");
    private final String value;

    ReferenceSigningBase(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ReferenceSigningBase fromValue(String v) {
        for (ReferenceSigningBase c: ReferenceSigningBase.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
